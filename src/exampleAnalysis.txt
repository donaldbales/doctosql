import * as changeCase from 'change-case';
import * as fs from 'fs';
import * as util from 'util';
import * as xml2js from 'xml2js';
import * as _ from 'lodash';

import Database from './Database';
import * as enablonEquipment from '../models/enablonEquipment';
import * as enablonFirstAxis from '../models/enablonFirstAxis';

function attributeNameToUpperSnake(attributeName: string): string {
  const upperSnaky: string = changeCase.snake(attributeName).toUpperCase();
  return upperSnaky;
}

export function one() {
  const attributes: any = {};
  const parser = new xml2js.Parser({ explicitArray : false });
  fs.readFile(__dirname + '/../../db/EnablonEquipment_2018-03-20.xml', 'ucs2', function(error1: any, data: any) {
    if (!error1) {
      parser.parseString(data, function (error2: any, result: any) {
        if (!error2) {
          console.log(`typeof(result)=${typeof(result)}`);
          console.log(`result instanceof Array=${result instanceof Array}`);

          const document: any = result.Document;
          console.log(`typeof(document)=${typeof(document)}`);
          console.log(`document instanceof Array=${document instanceof Array}`);
          
          const records: any = document.Record;
          console.log(`typeof(records)=${typeof(records)}`);
          console.log(`records instanceof Array=${records instanceof Array}`);
          console.log(`records.length=${records.length}`);
          
          //  console.dir(util.inspect(result, false, null));
          
          for (const record of records) {
            for (const attribute in record) {
              if (attributes[attribute]) {
                if (attributes[attribute].maxLength < record[attribute].length) {
                  attributes[attribute].maxLength = record[attribute].length;
                }
                if (record[attribute] instanceof Array && 
                   (attributes[attribute].dataType === 'object' ||
                    attributes[attribute].dataType === 'string')) {
                  attributes[attribute].dataType = 'Array';
                }
              } else {
                attributes[attribute] = {
                  maxLength: record[attribute].length
                };
                if (record[attribute] instanceof Array) {
                  attributes[attribute].dataType = 'Array';
                } else {
                  attributes[attribute].dataType = typeof(record[attribute]);
                } 
              }
            } 
          }
          for (const attribute in attributes) {
            console.log(`${attribute}\tdataType: ${attributes[attribute].dataType}\tmaxLength: ${attributes[attribute].maxLength}`);
          }
          console.log('Done');
        } else {
          console.error(error2);
        }
      });
    } else {
      console.error(error1);
    }
  });

}

function getDatabaseConnection(): any {
  let connection;
  try {
    // grab the environment variable with the database connection string
    connection = JSON.parse((process.env.APPSETTING_SQLCONNECTION as string));
  } catch (e) {
    console.log('APPSETTING_SQLCONNECTION is not a valid JSON string');
  }

  if (!_.isPlainObject(connection)) {
    console.log('Invalid database connection string.  Check value of APPSETTING_SQLCONNECTION');
    // App cannot start without a database, so die
    process.exit(1);
  }

  // Global instances
  const databaseConnection: any = new Database({
    options: {
      connectTimeout: 30000,
      database: connection.database,
      encrypt: true,
      readOnlyIntent: true,
      requestTimeout: 60000,
      rowCollectionOnRequestCompletion: false,
      useColumnNames: false
    },
    password: connection.password,
    server: connection.server,
    userName: connection.userName
  });
  
  return databaseConnection;
}

export function two() {
  const attributes: any = {};
  const parser = new xml2js.Parser({ explicitArray : false });
  fs.readFile(__dirname + '/../../db/EnablonEquipment_2018-03-20.xml', 'ucs2', function(error1: any, data: any) {
    if (!error1) {
      parser.parseString(data, function (error2: any, result: any) {
        if (!error2) {
          // console.log(`typeof(result)=${typeof(result)}`);
          // console.log(`result instanceof Array=${result instanceof Array}`);

          const document: any = result.Document;
          // console.log(`typeof(document)=${typeof(document)}`);
          //  console.log(`document instanceof Array=${document instanceof Array}`);
          
          const records: any = document.Record;
          // console.log(`typeof(records)=${typeof(records)}`);
          // console.log(`records instanceof Array=${records instanceof Array}`);
          console.log(`records.length=${records.length}`);
          
          //  console.dir(util.inspect(result, false, null));
          
          const connectionPromise = getDatabaseConnection().connection;
          connectionPromise.then((conn: any) => {
            let recordsCount: number;
            recordsCount = 0;
            chaseTwo(conn, records, recordsCount, () => {
              console.log('Done.');
            });
          }).catch((error3: any) => {
            console.log(error3);
          });
        } else {
          console.error(error2);
        }
      });
    } else {
      console.error(error1);
    }
  });

}

function chaseTwo(conn: any, docs: any, docCount: number, next: any) {
  enablonEquipment.insert(conn, docs[docCount], (error: any, result: any) => {
    if (!error) {
      if (docCount < docs.length - 1) {
        chaseTwo(conn, docs, ++docCount, next);
      } else {
        next();
      }
    } else {
      console.error(error);
    }
  });
}

export function three() {
  const attributes: any = {};
  const parser = new xml2js.Parser({ explicitArray : false });
  fs.readFile(__dirname + '/../../db/EnablonFirstAxis_2018-03-20.xml', 'ucs2', function(error1: any, data: any) {
    if (!error1) {
      parser.parseString(data, function (error2: any, result: any) {
        if (!error2) {
          console.log(`typeof(result)=${typeof(result)}`);
          console.log(`result instanceof Array=${result instanceof Array}`);

          const document: any = result.Document;
          console.log(`typeof(document)=${typeof(document)}`);
          console.log(`document instanceof Array=${document instanceof Array}`);
          
          const records: any = document.Record;
          console.log(`typeof(records)=${typeof(records)}`);
          console.log(`records instanceof Array=${records instanceof Array}`);
          console.log(`records.length=${records.length}`);
          
          //  console.dir(util.inspect(result, false, null));
          
          for (const record of records) {
            for (const attribute in record) {
              if (attributes[attribute]) {
                if (attributes[attribute].maxLength < record[attribute].length) {
                  attributes[attribute].maxLength = record[attribute].length;
                }
                if (record[attribute] instanceof Array && 
                   (attributes[attribute].dataType === 'object' ||
                    attributes[attribute].dataType === 'string')) {
                  attributes[attribute].dataType = 'Array';
                }
              } else {
                attributes[attribute] = {
                  upperSnake: attributeNameToUpperSnake(attribute),
                  maxLength: record[attribute].length
                };
                if (record[attribute] instanceof Array) {
                  attributes[attribute].dataType = 'Array';
                } else {
                  attributes[attribute].dataType = typeof(record[attribute]);
                } 
              }
            } 
          }
          console.log(`ATTRIBUTE\tDATA TYPE\tMAX LENGTH\tCOLUMN NAME`);
          for (const attribute in attributes) {
            let sqlDataType: string;
            if (attributes[attribute].upperSnake === 'ID') {
              sqlDataType = 'BIGINT';
            } else if (attributes[attribute].dataType === 'Array') {
              sqlDataType = 'VARCHAR(500)';
            } else if (attributes[attribute].maxLength > 50) {
              sqlDataType = 'VARCHAR(500)';
            } else {
              sqlDataType = 'VARCHAR(50)';
            }
            console.log(`${attribute}\t${attributes[attribute].dataType}\t ${attributes[attribute].maxLength}\t${attributes[attribute].upperSnake}\t${sqlDataType}`);
          }
          console.log('Done');
        } else {
          console.error(error2);
        }
      });
    } else {
      console.error(error1);
    }
  });

}

export function four() {
  const attributes: any = {};
  const parser = new xml2js.Parser({ explicitArray : false });
  fs.readFile(__dirname + '/../../db/EnablonFirstAxis_2018-03-20.xml', 'ucs2', function(error1: any, data: any) {
    if (!error1) {
      parser.parseString(data, function (error2: any, result: any) {
        if (!error2) {
          // console.log(`typeof(result)=${typeof(result)}`);
          // console.log(`result instanceof Array=${result instanceof Array}`);

          const document: any = result.Document;
          // console.log(`typeof(document)=${typeof(document)}`);
          //  console.log(`document instanceof Array=${document instanceof Array}`);
          
          const records: any = document.Record;
          // console.log(`typeof(records)=${typeof(records)}`);
          // console.log(`records instanceof Array=${records instanceof Array}`);
          console.log(`records.length=${records.length}`);
          
          //  console.dir(util.inspect(result, false, null));
          
          const connectionPromise = getDatabaseConnection().connection;
          connectionPromise.then((conn: any) => {
            let recordsCount: number;
            recordsCount = 0;
            chaseFour(conn, records, recordsCount, () => {
              console.log('Done.');
            });
          }).catch((error3: any) => {
            console.log(error3);
          });
        } else {
          console.error(error2);
        }
      });
    } else {
      console.error(error1);
    }
  });

}

function chaseFour(conn: any, docs: any, docCount: number, next: any) {
  enablonFirstAxis.insert(conn, docs[docCount], (error: any, result: any) => {
    if (!error) {
      if (docCount < docs.length - 1) {
        chaseFour(conn, docs, ++docCount, next);
      } else {
        next();
      }
    } else {
      console.error(error);
    }
  });
}

four();
